#!/usr/bin/env node

var argv = require('optimist').argv;

var semVer = require('../lib/semVer');
var SemVer = semVer.constructor;
var pretty = require('../lib/pretty');
var commandStack = require('../lib/commandStack');
var gitWrapper = require('../lib/gitWrapper');
var packageJsonWrapper = require('../lib/packageJsonWrapper');
var htmlMetaUpdater = require('../lib/htmlMetaUpdater');


if (argv.h || argv.help) {
    pretty.log("HOW TO USE:", pretty.BLACK);
    pretty.log("\n# print this help", pretty.BLUE);
    pretty.log("   verily -h", pretty.GREEN);
    pretty.log("   verily --help", pretty.GREEN);
    pretty.log("\n# publish/don't publish", pretty.BLUE);
    pretty.log("   verily --publish", pretty.GREEN);
    pretty.log("   verily --no-publish", pretty.GREEN);
    pretty.log("\n# tag/don't tag", pretty.BLUE);
    pretty.log("   verily --tag", pretty.GREEN);
    pretty.log("   verily --no-tag", pretty.GREEN);
    pretty.log("\n# bump build on prerelease", pretty.BLUE);
    pretty.log("# (sorry you can't name prereleases: '1.2.3', 'major', 'minor', 'patch', or '-h')", pretty.BLUE);
    pretty.log("   verily alpha", pretty.GREEN);
    pretty.log("   verily rc2", pretty.GREEN);
    pretty.log("   verily my-special-name", pretty.GREEN);
    pretty.log("   verily dev -m \"my helpful commit message\"", pretty.GREEN);
    pretty.log("\n# bump part of the version", pretty.BLUE);
    pretty.log("   verily major", pretty.GREEN);
    pretty.log("   verily minor", pretty.GREEN);
    pretty.log("   verily patch", pretty.GREEN);
    pretty.log("\n# start development on a new version", pretty.BLUE);
    pretty.log("   verily 1.2.3-alpha", pretty.GREEN);
    pretty.log("\n# publish specific version", pretty.BLUE);
    pretty.log("   verily 1.2.3", pretty.GREEN);
    pretty.log("\n# force publish specific version", pretty.BLUE);
    pretty.log("   verily 1.2.3 --force", pretty.GREEN);
    return
}



var _nextVersion;
var _force;
var _tag;
var _publish;


function _calculateNextVersion() {
    _nextVersion = new SemVer(argv._[0]);
    _force = argv.force;
    _tag = argv.tag;
    console.log(_tag);
    console.log(_tag);
    var bump;
    if (_nextVersion.valid) {
        if (!_force && _nextVersion.prerelease) {
            bump = semVer.BUILD;
        }
    } else {
        _nextVersion = packageJsonWrapper.version.clone();
        bump = argv._[0] || semVer.BUILD;
    }
    if(bump === semVer.BUILD && !_nextVersion.prerelease) {
        _nextVersion.bump(semVer.PRERELEASE);
    }
    if (bump && !bump.match(/major|minor|patch|prerelease|build/)) {
        _nextVersion.prerelease = bump;
    }
    if (_nextVersion.prerelease || bump === semVer.PRERELEASE) {
        var today = new Date();
        _nextVersion.build = gitWrapper.branch + "-" + today.getFullYear() + "." + (today.getMonth() + 1) + "." + today.getDate();
    }
    if (bump) {
        if (bump !== semVer.BUILD) {
            _nextVersion.bump(bump);
        }
        while (!gitWrapper.isUniqueVersion(_nextVersion)) {
            _nextVersion.bump(bump);
        }
    }
    if (!_force && !gitWrapper.isUniqueVersion(_nextVersion)) {
        pretty.log("    # release already tagged with " + _nextVersion.toString() + " use --force to override, --help for help", pretty.RED);
        process.exit(1);
    }
    commandStack.resume();
}


function _requestPermission() {
    pretty.log("\n    # next version: " + _nextVersion.toString() + (_force ? " (forcing)" : ""), pretty.GREEN);
    process.stdout.write("    # is this okay (yes)?");
    process.stdin.on('data', function (data) {
        data = data.split(/\r\n|\r|\n/)[0];
        process.stdin.pause();
        if (data.match(/^(?:yes|y|)$/)) {
            commandStack.resume();
        } else {
            pretty.log("    # cancelled (no action taken)", pretty.RED);
            process.exit(1);
        }
    });
    process.stdin.resume();
    process.stdin.setEncoding('utf8');
}


function _deleteDuplicateTags() {
    gitWrapper.deleteDuplicateTags(_nextVersion);
}


function _updateJson() {
    packageJsonWrapper.package.version = _nextVersion.toString();
    packageJsonWrapper.save();
}


function _updateHtml() {
    htmlMetaUpdater.setMeta("build", _nextVersion.toString());
}


function _commit() {
    if (argv.m) {
        gitWrapper.commit(argv.m + " [ " + _nextVersion.toString() + " ]");
    } else {
        gitWrapper.commit("updated version: " + _nextVersion.toString())
    }
}


function _git_tag() {
    if(_tag) gitWrapper.tag(_nextVersion);
}

function _git_push_tags() {
    if(_tag) gitWrapper.pushTags();
}


function _announceVersion() {
    pretty.log("# Version bumped to:  ---==={ " + _nextVersion.toString() + " }===---", pretty.MAGENTA);
    commandStack.resume();
}


commandStack.stack = [
    gitWrapper.fetch,
    gitWrapper.getLocalGitTags,
    gitWrapper.getRemoteGitTags,
    gitWrapper.getBranch,
    packageJsonWrapper.getVersion,
    _calculateNextVersion,
    _requestPermission,
    _deleteDuplicateTags,
    _updateJson,
    _updateHtml,
    _commit,
    gitWrapper.push,
    _git_tag,
    _git_push_tags,
    _announceVersion
];


commandStack.resume();
